#!/bin/bash
# gladius -- build and extract script for Gladius Modding.

MKDIR_P="$(which mkdir) -p"
RM_F="$(which rm) -f"
P7ZIP="$(which 7z)"
PYTHON="$(which python3)"
if [[ -z PYTHON ]]; then
    echo "$0: ERROR (python3 doesn't seem to be installed and is required.)" >&2
    exit 1
fi

#Flags
AUDIO=0
INIT=0
INITISO=0
BUILDAUDIO=0
BUILDDATA=0
BUILDISO=0
CLEAN=0
CLEANALL=0
ECHO=0
GC=0
PS=0
VERBOSE=""

# Default parameters
ISONAME="gladius"
BASEDIR="baseiso"
BASEISO="baseiso.iso"
DATABEC="gladius.bec"
AUDIOBEC="audio.bec"

#@params
    # $1 - Path to base iso
    # $2 - Directory for output
    # $3 - Output file list
function unpack_iso()
{
    if [[ PS -eq 1 ]]; then
        if [[ ! -z P7ZIP ]]; then
            $P7ZIP x -o$2 $1 -aos
        else
            echo "$0: ERROR (p7zip doesn't seem to be installed and is required.)" >&2
            exit 1
        fi
    else
        $PYTHON tools/ngciso-tool.py -unpack $1 $2 $3;
    fi
}

#@params
    # $1 - Input BEC file
    # $2 - Directory for output
    # $3 - Output file list
function unpack_bec() { $PYTHON tools/bec-tool.py -unpack $1 $2 $3; }

#@params
    # $1 - Directory for input
    # $2 - Fst file
    # $3 - Fst map (iso file list)
    # $4 - Output iso file
function create_iso() { $PYTHON tools/ngciso-tool.py -pack $1 $2 $3 $4; }

#@params
    # $1 - Directory for input
    # $2 - Directory for output
    # $3 - File list containing all necessary files to pack
function create_bec()
{
    if [[ GC -eq 1 ]]; then
        write_verbose "Packing $1 with --gc flag..."
        $PYTHON tools/bec-tool.py -pack $1 $2 $3 --gc
    else
        write_verbose "Packing $1..."
        $PYTHON tools/bec-tool.py -pack $1 $2 $3
    fi
}

#@params
    # $1 - BEC file
    # $2 - BEC directory
function build_bec()
{
    write_verbose "Repacking $1..."
    $EORR create_bec ./$BASEDIR/$2/ ./build/$1 ./$BASEDIR/$2/$2_FileList.txt
    write_verbose "Moving $1 to $BASEDIR"
    $EORR cp -v ./build/$1 ./$BASEDIR
}

function check_version
{
    if file $BASEISO | grep -qi "udf"; then
        write_verbose "Found PS2 Version."
        PS=1
        DATABEC="DATA.BEC"
        AUDIOBEC="AUDIO.BEC"
    elif file $BASEISO | grep -qi "gamecube"; then
        write_verbose "Found GC Version."
        GC=1
    else
        write_verbose "Failed automatic version check"
        echo "Select your game verison."
        select yn in "PlayStation2" "GameCube"; do
            case $yn in
                PlayStation2 ) write_verbose "Manually selected PlayStation version."; PS=1; DATABEC="DATA.BEC"; AUDIOBEC="AUDIO.BEC"; break ;;
                GameCube ) write_verbose "Manually selected GameCube version."; GC=1; break ;;
            esac
        done
    fi
}

function print_man
{
cat << EOF
NAME
    gladius -- build and extract script for Gladius ROMs.

DESCRIPTION
    Executes prewritten tools to extract and repackage Gladius ROMs.

    -a, --build-audio
            Repackages the audio.bec file in the 'build' directory.
    -b, --build-data
            Repackages the gladius.bec file in  the 'build' directory.
    -c, --clean
            Removes build directory contents and any previously built isos.
    --clean-all
            Removes output directory, build directory, and any modified isos. Use with caution.
    -d, --dir
            point to specified output directory. Default is 'baseiso'.
    -e, --echo
            outputs the commands to be run without exucuting them.
    -g, --build-iso
            Repackages the gladius ROM in the project directory.
    --gc
            Manually denotes GameCube version of Gladius.
    -h, --help
            shows this information.
    -i, --init
            Unpacks iso and gladius.bec to output directory.
    -n, --name
            custom name for iso. defaults to 'gladius'.
    --ps
            Manually denotes PlayStation2 version of Gladius. REQUIRES P7zip!
    -r, --rom
            point to specified gladius ROM to extract. Deafult is 'baseiso.iso'.
    -s, --init-audio
            Unpacks the audio.bec to the output directory.
    -v, --verbose
            shows more detailed information of what the script is doing. Use this
            for debugging.
    -x, --init-iso
            Unpacks pointed ROM to output direcory. Does NOT unpack any BEC archives.
EOF
}

function print_usage
{
    echo "Usage: $(basename $0) [--gc|--ps] [--name|-n] [--rom|-r] [--dir|-d] (--build-audio|-a, --build-data|-b, --build-iso|-g, --clean|-c, --clean-all, --init|-i, --init-audio|-s, --init-iso|-x) [--echo|-e] [--help|-h] [--verbose|-v]," >&2
    echo "    where flags surrounded in '[]' are optional." >&2
    echo "    and all flags surrounded in '()' are actions. There must be at least one action." >&2
}

#@params
    # $1 - Verbose message
function write_verbose ()
{
    if [[ "$VERBOSE" == "-v" ]]; then
        echo $1
    fi
}

for arg in "$@"; do
    shift
    case "$arg" in
     "--build-audio") set -- "$@" "-a"      ;;
      "--build-data") set -- "$@" "-b"      ;;
       "--build-iso") set -- "$@" "-g"      ;;
           "--clean") set -- "$@" "-c"      ;;
       "--clean-all") CLEANALL=1            ;;
             "--dir") set -- "$@" "-d"      ;;
            "--echo") set -- "$@" "-e"      ;;
              "--gc") if [[ PS -eq 1 ]]; then
                          echo "$0: ERROR (--gc and --ps are mutually exclusive.)" >&2
                          exit 1
                      fi
                      GC=1 ;;
            "--help") set -- "$@" "-h"      ;;
            "--init") set -- "$@" "-i"      ;;
      "--init-audio") set -- "$@" "-s"      ;;
        "--init-iso") set -- "$@" "-x"      ;;
            "--name") set -- "$@" "-n"      ;;
              "--ps") if [[ GC -eq 1 ]]; then
                          echo "$0: ERROR (--gc and --ps are mutually exclusive.)" >&2
                          exit 1
                      fi
                      PS=1; DATABEC="DATA.BEC"; AUDIOBEC="AUDIO.BEC" ;;
             "--rom") set -- "$@" "-r"      ;;
         "--verbose") set -- "$@" "-v"      ;;
                  * ) set -- "$@" "$arg"
    esac
done

OPTIND=1
while getopts ":d:n:r:abceghisvx" opt; do
    case "$opt" in
        "a") BUILDAUDIO=1 ;;
        "b") BUILDDATA=1 ;;
        "c") CLEAN=1 ;;
        "d") BASEDIR="$OPTARG" ;;
        "e") ECHO=1 ;;
        "g") BUILDISO=1 ;;
        "h") print_man; exit 0 ;;
        "i") INIT=1 ;;
        "n") ISONAME="$OPTARG" ;;
        "r") BASEISO="$OPTARG" ;;
        "s") AUDIO=1 ;;
        "v") VERBOSE="-v" ;;
        "x") INITISO=1 ;;
        \? ) echo "$0: ERROR (Invalid parameter flag.)" >&2; print_usage >&2; exit 1 ;;
    esac
done
if [[ $OPTIND -eq 1 ]]; then print_usage >&2; exit 1; fi
shift $(($OPTIND - 1))

# Actions
ACTIONS=($INIT $AUDIO $INITISO $BUILDAUDIO $BUILDDATA $BUILDISO $CLEAN $CLEANALL)
LEAST_ONE_ACTION=""
for i in "${ACTIONS[@]}"
do
    if [[ $i -eq 1 ]]; then
        LEAST_ONE_ACTION="true"
        break
    fi
done

if [[ ! $LEAST_ONE_ACTION ]]; then
    echo "$0: ERROR (Must supply at least one action.)" >&2
    print_usage
    exit 1
fi

if [[ ! GC -eq 1 ]] && [[ ! PS -eq 1 ]]; then
    # Check for PS2 version
    write_verbose "Automatically checking game version..."
    check_version >&2
fi

if [[ ECHO -eq 1 ]]; then
    write_verbose "Echoing necessary commands... "
    EORR='echo'
else
    EORR=''
fi

if [[ CLEAN -eq 1 ]]; then
    write_verbose "Removing build contents and modified isos..."
    $EORR $RM_F build/*
    $EORR find *.iso ! -name $BASEISO -type f -exec rm -f {} +
fi

if [[ CLEANALL -eq 1 ]]; then
    if [[ ECHO -eq 1 ]]; then
        echo "$RM_F -r $BASEDIR"
        echo "$RM_F -r ./build"
        echo "find *.iso ! -name $BASEISO -type f -exec rm -f {} +"
    else
        read -p "WARNING: This will remove $BASEDIR, any modified isos, and build contents. Do you want to continue? (y/n)" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
        write_verbose "Removing $BASEDIR..."
        $RM_F -r $BASEDIR
        write_verbose "Removing build directory..."
        $RM_F -r ./build
        write_verbose "Removing any modified isos (not $BASEISO)..."
        find *.iso ! -name $BASEISO -type f -exec rm -f {} +
    fi
fi

if [[ INIT -eq 1 ]]; then
    write_verbose "Extracting $BASEISO to '$BASEDIR' directory..."
    $EORR $MKDIR_P $BASEDIR
    $EORR unpack_iso ./$BASEISO ./$BASEDIR/ BaseISO_FileList.txt
    $EORR unpack_bec ./$BASEDIR/$DATABEC ./$BASEDIR/gladius_bec/ gladius_bec_FileList.txt
fi

if [[ INITISO -eq 1 ]]; then
    write_verbose "Extracting $BASEISO to '$BASEDIR' directory..."
    $EORR unpack_iso ./$BASEISO ./$BASEDIR/ BaseISO_FileList.txt
fi

if [[ AUDIO -eq 1 ]]; then
    if [[ INIT -eq 0 && INITISO -eq 0 && ! -d ./$BASEDIR ]]; then
        $EORR $MKDIR_P $BASEDIR
        write_verbose "Extracting $BASEISO to '$BASEDIR' directory..."
        $EORR unpack_iso ./$BASEISO ./$BASEDIR/ BaseISO_FileList.txt
    fi
    write_verbose "Extracting audio.bec to '$BASEDIR' directory..."
    $EORR unpack_bec ./$BASEDIR/$AUDIOBEC ./$BASEDIR/audio_bec/ audio_bec_FileList.txt
fi

if [[ BUILDAUDIO -eq 1 ]]; then
    $EORR $MKDIR_P build/
    $EORR build_bec $AUDIOBEC audio_bec
fi

if [[ BUILDDATA -eq 1 ]]; then
    $EORR $MKDIR_P build/
    $EORR build_bec $DATABEC gladius_bec
fi

if [[ BUILDISO -eq 1 ]]; then
    write_verbose "Packing $ISONAME iso..."
    $EORR $MKDIR_P build/
    if [[ BUILDDATA -eq 0 ]]; then
        build_bec $AUDIOBEC audio_bec
    fi
    if [[ BUILDAUDIO -eq 0 && -d ./$BASEDIR/audio_bec ]]; then
        build_bec $DATABEC gladius_bec
    fi
    if [[ PS -eq 0 ]]; then
        $EORR create_iso ./$BASEDIR ./$BASEDIR/fst.bin ./$BASEDIR/BaseISO_FileList.txt "$ISONAME.iso"
        $EORR md5sum "$ISONAME.iso"
    fi
fi

exit 0
