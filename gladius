#!/bin/bash
# gladius -- build and extract script for Gladius ROMs.

MKDIR_P="$(which mkdir) -p"
RM_F="$(which rm) -f"
PYTHON="$(which python3)"
ZIP="$(which 7z)"

#Flags
AUDIO=0
INIT=0
BUILDAUDIO=0
BUILDDATA=0
BUILDISO=0
CLEAN=0
ECHO=0
PS=0
DATAPATH=""
VERBOSE=""

ISONAME="gladius"
BASEDIR="baseiso"
BASEISO="baseiso.iso"
DATABEC="gladius.bec"
AUDIOBEC="audio.bec"

# @params
    # $1 - Path to base iso
    # $2 - Directory for output
    # $3 - Output file list
function unpack_iso()
{
    if [[ PS -eq 1 ]]; then
        $ZIP x -o$2 $1
    else
        $PYTHON tools/ngciso-tool.py -unpack $1 $2 $3;
    fi
}

# @params
    # $1 - input bec file
    # $2 - Directory for output
    # $3 - Output file list
function unpack_bec() { $PYTHON tools/bec-tool.py -unpack $1 $2 $3; }

# @params
    # $1 - inputFile
    # $2 - outputFile
function unpack_zlib() { $PYTHON tools/zlib-tool.py -x $1 $2; }

# @params
    # $1 - Directory for input
    # $2 - fst file
    # $3 - fst map (iso file list)
    # $4 - output iso file
function create_iso() { $PYTHON tools/ngciso-tool.py -pack $1 $2 $3 $4; }

# @params
    # $1 - Directory for input
    # $2 - Directory for output
    # $3 - file list containing all necessary files to pack
function create_bec() { $PYTHON tools/bec-tool.py -pack $1 $2 $3; }

# @params
    # $1 - inputFile
    # $2 - outputFile
function create_zlib() { $PYTHON tools/zlib-tool.py -c $1 $2; }

function check_ps2
{
    if [[ ! -z $ZIP ]]; then
        $ZIP l $BASEISO > /tmp/test.log
        if grep -q "PLAYSTATION" /tmp/test.log; then
            write_verbose "Found PS2 Version."
            DATABEC="DATA.BEC"
            AUDIOBEC="AUDIO.BEC"
            PS=1
        else
            write_verbose "Found GC Version."
        fi
    else
        write_verbose "Failed automatic check for PS2 version."
        echo "Warning: p7zip is required to unpack the PS2 version. Is $BASEISO a PS2 copy?"
        select yn in "Yes" "No"; do
            case $yn in
                Yes ) echo "Error: p7zip is not installed. exiting..."; exit 1;;
                 No ) write_verbose "Manually selected GC Version."; break;;
            esac
        done
    fi
}

function print_man
{
cat << EOF
NAME
    gladius -- build and extract script for Gladius ROMs.

DESCRIPTION
    Executes prewritten tools to extract and repackage Gladius ROMs.

    -a, --build-audio
            Repackages the audio.bec file in the 'build' directory.
    -b, --build-data
            Repackages the gladius.bec file in  the 'build' directory.
    -c, --clean
            Removes build directory contents and any previously built isos.
    -d, --dir
            point to specified output directory. Default is 'baseiso'.
    -e, --echo
            outputs the commands to be run without exucuting them.
    -g, --build-iso
            Repackages the gladius ROM in the project directory.
    -h, --help
            shows this information.
    -i, --init
            Unpacks iso and gladius.bec to 'baseiso' directory.
    -n, --name
            custom name for iso. defaults to 'gladius'.
    -r, --rom
            point to specified gladius ROM to extract. Deafult is 'baseiso.iso'.
    -s, --init-audio
            Unpacks the audio.bec to the 'baseiso' directory.
    -v, --verbose
            shows more detailed information of what the script is doing. Use this
            for debugging.
    -z, --compress
            Compress a file into a zlib archive. Filepaths are relative to '$BASEDIR/gladius_bec/data'. ONLY FOR PS2.
EOF
}

function print_usage
{
    echo "Usage: $(basename $0) [--build-audio|-a] [--build-data|-b] [--build-iso|-g] [--clean|-c] [--compress|-z] [--echo|-e] [--help|-h] [--init|-i] [--name|-n] [--rom|-r] [--init-audio|-s] [--verbose|-v]," >&2
    echo "    where flags surrounded in '[]' are optional." >&2
}

function write_verbose ()
{
    if [[ "$VERBOSE" == "-v" ]]; then
        echo $1
    fi
}

for arg in "$@"; do
    shift
    case "$arg" in
     "--build-audio") set -- "$@" "-a"      ;;
      "--build-data") set -- "$@" "-b"      ;;
       "--build-iso") set -- "$@" "-g"      ;;
           "--clean") set -- "$@" "-c"      ;;
        "--compress") set -- "$@" "-z"      ;;
             "--dir") set -- "$@" "-d"      ;;
            "--echo") set -- "$@" "-e"      ;;
            "--help") set -- "$@" "-h"      ;;
            "--init") set -- "$@" "-i"      ;;
      "--init-audio") set -- "$@" "-s"      ;;
            "--name") set -- "$@" "-n"      ;;
             "--rom") set -- "$@" "-r"      ;;
         "--verbose") set -- "$@" "-v"      ;;
                  * ) set -- "$@" "$arg"
    esac
done

OPTIND=1
while getopts ":d:n:r:z:abceghisv" opt; do
    case "$opt" in
        "a") BUILDAUDIO=1 ;;
        "b") BUILDDATA=1 ;;
        "c") CLEAN=1 ;;
        "d") BASEDIR="$OPTARG" ;;
        "e") ECHO=1 ;;
        "g") BUILDISO=1 ;;
        "h") print_man; exit 0 ;;
        "i") INIT=1 ;;
        "n") ISONAME="$OPTARG" ;;
        "r") BASEISO="$OPTARG" ;;
        "s") AUDIO=1 ;;
        "v") VERBOSE="-v" ;;
        "z") DATAPATH="$OPTARG" ;;
        \? ) echo "Error: Invalid parameter flag." >&2; print_usage >&2; exit 1 ;;
    esac
done
if [[ $OPTIND -eq 1 ]]; then print_usage >&2; exit 1; fi
shift $(($OPTIND - 1))

# Check for PS2 version
check_ps2 >&2

if [[ ! -z $DATAPATH ]]; then
    if [[ PS -eq 1 ]]; then
        create_zlib ./$BASEDIR/gladius_bec/data/$DATAPATH ./$BASEDIR/gladius_bec/zlib/data/$DATAPATH.zlib
        exit 0;
    fi
fi

if [[ ECHO -eq 1 ]]; then
    write_verbose "Echoing necessary commands... "
    EORR='echo'
else
    EORR=''
fi

if [[ CLEAN -eq 1 ]]; then
    write_verbose "Removing build contents and modified isos..."
    $EORR $RM_F build/*
    $EORR find *.iso ! -name $BASEISO -type f -exec rm -f {} +
fi

if [[ INIT -eq 1 ]]; then
    write_verbose "Extracting $BASEISO to '$BASEDIR' directory..."
    $EORR $MKDIR_P $BASEDIR
    $EORR unpack_iso ./$BASEISO ./$BASEDIR/ BaseISO_FileList.txt
    $EORR unpack_bec ./$BASEDIR/$DATABEC ./$BASEDIR/gladius_bec/ gladius_bec_FileList.txt
fi

if [[ AUDIO -eq 1 ]]; then
    write_verbose "Extracting audio.bec to '$BASEDIR' directory..."
    $EORR unpack_bec ./$BASEDIR/$AUDIOBEC ./$BASEDIR/audio_bec/ audio_bec_FileList.txt
fi

if [[ BUILDAUDIO -eq 1 ]]; then
    write_verbose "Repacking audio.bec..."
    $EORR $MKDIR_P build/
    $EORR create_bec ./$BASEDIR/audio_bec/ ./build/$AUDIOBEC ./$BASEDIR/audio_bec/audio_bec_FileList.txt
fi

if [[ BUILDDATA -eq 1 ]]; then
    write_verbose "Repacking gladius.bec..."
    $EORR $MKDIR_P build/
    $EORR create_bec ./$BASEDIR/gladius_bec/ ./build/$DATABEC ./$BASEDIR/gladius_bec/gladius_bec_FileList.txt
fi

if [[ BUILDISO -eq 1 ]]; then
    write_verbose "Packing $ISONAME iso..."
    $EORR $MKDIR_P build/
    if [[ BUILDDATA -eq 0 ]]; then
        $EORR create_bec ./$BASEDIR/gladius_bec/ ./build/$DATABEC ./$BASEDIR/gladius_bec/gladius_bec_FileList.txt
    fi
    if [[ BUILDAUDIO -eq 0 && -d ./$BASEDIR/audio_bec ]]; then
        $EORR create_bec ./$BASEDIR/audio_bec/ ./build/$AUDIOBEC ./$BASEDIR/audio_bec/audio_bec_FileList.txt
        $EORR cp -v ./build/$AUDIOBEC ./$BASEDIR
    fi
    $EORR cp -v ./build/$DATABEC ./$BASEDIR
    if [[ PS -eq 0 ]]; then
        $EORR create_iso ./$BASEDIR ./$BASEDIR/fst.bin ./$BASEDIR/BaseISO_FileList.txt "$ISONAME.iso"
        $EORR md5sum "$ISONAME.iso"
    fi
fi

exit 0
